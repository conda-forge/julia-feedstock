{% set name = "julia" %}
{% set version = "1.10.4" %}
{% set sha256 = "f32e5277f5d82a63824882cdebfac158199bb84814c3c019a3fecc3601586191" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: julia-{{ version }}-full.tar.gz

  url: https://github.com/JuliaLang/julia/releases/download/v{{ version }}/julia-{{ version }}-full.tar.gz
  sha256: {{ sha256 }}
  patches:
    ## from https://github.com/archlinux/svntogit-community/tree/packages/julia/trunk
    - patches/julia-hardcoded-libs.patch
    ## issues with this precompile test, see https://github.com/JuliaLang/julia/issues/43535
    - patches/disable-testing-Baz.baz.patch  # [linux]
    - patches/julia-libunwind-1.6.patch  # [linux]
    # 1.10.3 links suitesparse cuda libs, patch should not be needed for 1.10.4
    - patches/suitesparse-no-cuda.patch
    # suitesparse soname version is hardcoded
    - patches/suitesparse-soname.patch
    ## these gmp tests return DivideError rather than OutOfMemoryError on cf ci
    - patches/disable-some-gmp-tests.patch
    ## for some reason, this new change results in weird printouts in cf ci
    - patches/disable-some-cmdlineargs-test.patch

build:
  skip: true  # [win]
  number: 1
  binary_relocation: false
  features:

requirements:
  build:
    - make
    - perl
    - python 3
    - {{ compiler('fortran') }}
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
  host:
    - openblas-ilp64
    - patchelf  # [linux]
    - openlibm
    - gmp
    - curl
    - libgit2  # [not osx]
    - libssh2
    - libosxunwind  # [osx]
    - libunwind  # [linux]
    - mbedtls  # [not osx]
    - mpfr
    - arpack
    - suitesparse
    - pcre2
    - git
    - libutf8proc
    - libnghttp2
    - zlib
    - p7zip

  run:
    - openblas-ilp64
    - libosxunwind  # [osx]
    - libunwind  # [linux]
    - gmp
    - openlibm
    - arpack
    - suitesparse
    - pcre2
    - curl
    - libgit2  # [not osx]
    - libssh2
    - mbedtls  # [not osx]
    - mpfr
    - git
    - libutf8proc
    - libnghttp2
    - zlib
    - p7zip

test:
  commands:
    # check out versioninfo
    - julia -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
    # see if env vars are defined correctly
    - echo $CONDA_JL_HOME
    - echo $CONDA_JL_CONDA_EXE
    # run julia tests
    # 2024/02/04: remove bitarray and threads due to flakiness on cf ciÂ 
    - julia -e 'Base.runtests(["subarray", "core", "compiler", "worlds", "keywordargs", "numbers", "subtype", "char", "strings", "triplequote", "unicode", "intrinsics", "dict", "hashing", "iobuffer", "staged", "offsetarray", "arrayops", "tuple", "reduce", "reducedim", "abstractarray", "intfuncs", "simdloop", "vecelement",
      "rational", "copy", "math", "fastmath", "functional", "iterators", "operators", "ordering", "path", "ccall", "parse", "gmp", "sorting", "spawn", "backtrace", "exceptions", "file", "read", "version", "namedtuple", "mpfr", "broadcast", "complex", "floatapprox", "reflection", "regex", "float16", "combinatorics", "sysinfo",
      "env", "rounding", "ranges", "mod2pi", "euler", "show", "client", "errorshow", "sets", "goto", "llvmcall", "llvmcall2", "ryu", "some", "meta", "stacktraces", "docs", "misc", "stress", "binaryplatforms", "atexit", "enums", "int", "interpreter", "checked", "bitset", "floatfuncs", "precompile", "boundscheck", "error",
      "ambiguous", "cartesian", "osutils", "channels", "iostream", "secretbuffer", "specificity", "reinterpretarray", "syntax", "corelogging", "missing", "asyncmap", "smallarrayshrink", "download", "opaque_closure", "filesystem"]; ncores=ceil(Int, Sys.CPU_THREADS))'                                        # all except stdlib?
    - julia --project -e 'delete!(ENV, "JULIA_PROJECT"); delete!(ENV, "JULIA_LOAD_PATH"); Base.runtests(["loading", "cmdlineargs"])' # Julia 1.7.1 tests error here when a project is defined
    - julia -e 'import Pkg;Pkg.add("LibSSH2_jll")'
    - julia -e 'import Pkg;Pkg.add("Sundials")'
    - echo $JULIA_CONDAPKG_BACKEND
    - julia -e 'import Pkg; Pkg.add("CondaPkg"); using CondaPkg; CondaPkg.add_channel("conda-forge"); CondaPkg.status(); CondaPkg.current_packages()'
    - julia -e 'import Pkg; Pkg.add("CondaPkg"); using CondaPkg; CondaPkg.add_channel("conda-forge"); print(CondaPkg.conda_cmd())'
  requires:
    - perl

about:
  home: http://julialang.org/
  license: MIT
  license_file: LICENSE.md
  summary: A high-performance dynamic programming language for data science
  description: |
    Julia is a high-level, high-performance dynamic language for technical computing.
    The main homepage for Julia can be found at julialang.org.
  dev_url: https://github.com/JuliaLang/julia
  doc_url: https://docs.julialang.org

extra:
  recipe-maintainers:
    - SylvainCorlay
    - bgruening
    - dfornika
    - acaprez
    - mariusvniekerk
    - abhi18av
    - mkitti
    - ngam
